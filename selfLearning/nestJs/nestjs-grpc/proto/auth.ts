// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** An empty message used when no input is required */
export interface Empty {
}

/** A wrapper message containing a list of users */
export interface Users {
  /** List of user objects */
  users: User[];
}

/** DTO for creating a new user */
export interface CreateUserDto {
  /** Username for the new user */
  username: string;
  /** Password for the new user */
  password: string;
  /** Age of the new user */
  age: number;
}

/** DTO for pagination input */
export interface PaginationDto {
  /** Page number to fetch */
  page: number;
  /** Number of records to skip */
  skip: number;
}

/** DTO for identifying a user by ID */
export interface FindOneUserDto {
  /** Unique user ID */
  id: string;
}

/** DTO for updating an existing user's data */
export interface UpdateUserDto {
  /** User ID to update */
  id: string;
  /** Updated social media details */
  socialMedia: SocialMedia | undefined;
}

/** The main user entity */
export interface User {
  /** Unique identifier */
  id: string;
  /** Username */
  username: string;
  /** Password (hashed/stored securely) */
  password: string;
  /** Age */
  age: number;
  /** Subscription status */
  subscribed: boolean;
  /** Social media profile links */
  socialMedia: SocialMedia | undefined;
}

/** Nested message to store optional social media URIs */
export interface SocialMedia {
  /** Twitter profile URI */
  twitterUri?:
    | string
    | undefined;
  /** Facebook profile URI */
  fbUri?: string | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

/** Service definition for managing users */

export interface UsersServiceClient {
  /** Creates a new user with the given data */

  createUser(request: CreateUserDto): Observable<User>;

  /** Retrieves all users in the system */

  findAllUsers(request: Empty): Observable<Users>;

  /** Retrieves a single user by their ID */

  findOneUser(request: FindOneUserDto): Observable<User>;

  /** Updates a user's information */

  updateUser(request: UpdateUserDto): Observable<User>;

  /** Removes a user by their ID */

  removeUser(request: FindOneUserDto): Observable<User>;

  /** Establishes a bidirectional stream to query users with pagination */

  queryUser(request: Observable<PaginationDto>): Observable<Users>;
}

/** Service definition for managing users */

export interface UsersServiceController {
  /** Creates a new user with the given data */

  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  /** Retrieves all users in the system */

  findAllUsers(request: Empty): Promise<Users> | Observable<Users> | Users;

  /** Retrieves a single user by their ID */

  findOneUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  /** Updates a user's information */

  updateUser(request: UpdateUserDto): Promise<User> | Observable<User> | User;

  /** Removes a user by their ID */

  removeUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  /** Establishes a bidirectional stream to query users with pagination */

  queryUser(request: Observable<PaginationDto>): Observable<Users>;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findAllUsers", "findOneUser", "updateUser", "removeUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["queryUser"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
